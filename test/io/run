#!/bin/bash --posix

##
##  Goal:       exercise the apl.py implementation of input and output operators
##
##  All tests record their output and compare it with a reference file.  There
##  should be no differences.  At the end, the script reports either "ALL OK"
##  or "Something went awry".
##
##  Use:        ./test/io/run [-a | -aa] [nn ... ]
##
##  where   nn is in the range [1,3] and designates which test cases to run
##          if nn is not given, all test cases are run
##
##  Flags:  -a      more automation -
##                  no prompting to inform the tester of what is going on
##          -aa     even more automation -
##                  any scripts that require manual are skipped
##

cd ${0%/*};

source ../../test/framework;

if [[ $# == 0 ]]; then
	narrative <<- EOF
	These are tests of apl-py's implementation of those APL operations that
	output more that one result.

	That is ⋄, ⎕←, ⍞←, ⎕, ⍞ and combinations thereof.

	Not only do the tests check the correct values are output but also
	that newlines do or not appear between values, as appropriate.

	The tests check the implementation of the input and output operators.

	Input is redirected to a file to ensure the same data is always input
	the same way so the comparison of log file with reference is reliable.
	EOF
    steps="1 2 3";
    rm case*;
else
    steps="$@";
fi

for step in ${steps}; do
    case ${step} in
      (1 | test_separator)
        narrative <<- EOF
	The first test case is a simple test of the expresssion separator (⋄).
	EOF

        nn=1;
        herald "Test Case ${nn} - Test ⋄ (expression separator)";
        invoke "test_${nn}.apl" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn}.ref";
        ;;

      (2 | test_output)
        narrative <<- EOF
	The next two test cases check the use of ⎕← and ⍞← for output.
	EOF

        nn=2a;
        herald "Test Case ${nn} - Test ⎕← (output operator)";
        invoke "test_${nn}.apl" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn}.ref";

        nn=2b;
        herald "Test Case ${nn} - Test ⍞← (output operator)";
        invoke "test_${nn}.apl" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn}.ref";
        ;;

      (3 | test_input)
        narrative <<- EOF
	The next two test cases check the use of ⎕ and ⍞ for input.
	The 'user input' is taken from a file.
	EOF

        nn=3a;
        herald "Test Case ${nn} - Test ⎕ (input operator)";
        invoke "test_${nn}.apl" '<' "test_${nn}.inp" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn}.ref";

        nn=3b;
        herald "Test Case ${nn} - Test ⍞ (input operator)";
        invoke "test_${nn}.apl" '<' "test_${nn}.inp" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn}.ref";
        ;;
    esac
done

summary;

# EOF
