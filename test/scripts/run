#!/bin/bash --posix

##
##  Goal:       exercise the scripting ability of the apl.py shell
##
##  All tests record their output and compare it with a reference file.  There
##  should be no differences.  At the end, the script reports either "ALL OK"
##  or "Something went awry".
##
##  Use:        ./test/scripts/run [-a | -aa] [nn ... ]
##
##  where   nn is in the range [1,8] and designates which test cases to run
##          if nn is not given, all test cases are run
##
##  Flags:  -a      more automation -
##                  no prompting to inform the tester of what is going on
##          -aa     even more automation -
##                  any scripts that require manual are skipped
##

cd ${0%/*};

source ../../test/framework;

if [[ $# == 0 ]]; then
	narrative <<- EOF
	These are tests of apl-py's execution of scripts rather than interactive use.

	The emphasis is less on 'are expressions evaluated the same way' but on:
	    - are command line flags handled properly
	    - do the echoing of input and suppression on prompts work as expected ?
	    - does the redirection of input work correctly ?

	Three cases are recognised:
	    a) pure and simple redirection of stdin using < and |
	    b) invocation with flags, such as -f file to read expression from file
	    c) turning a file into a script using the familiar #! first line

	All three have their uses.  If these tests prefer b) it is only because it
	allows test cases to be built using fewer external files.

	The APL command )OFF will cause the interpreter to exit:  anything that follows
	is ignored.  If there is no )OFF, the interpreter may enter interactive mode or
	interpret the remaining command line arguments as an expression.

	Entering interactive mode requires tester intervention to exit the interpreter
	before the test can move on to the next test case.
	EOF
    steps="1 2 3 4 5 6 7 8 9";
    rm case*;
else
    steps="$@";
fi

for step in ${steps}; do
    case ${step} in
      (1)
        narrative <<- EOF
	The first test cases are without scripts to check interactive
	operation still works.
	EOF

        nn=1a;
        herald "Test Case ${nn} - Invoke interactive mode - no script";
        if [[ -n "${nopause}" ]]; then
            note "\n... skipping\n";
        else
            note "... type ^D to exit the APL interpreter";
            invoke apl.py;
        fi

        nn=1b;
        herald "Test Case ${nn} - Evaluate a command line expression - no script";
        invoke apl.py 1 2 3 × 3 2 1
        ;;

      (2)
        narrative <<- EOF
	The following test cases check simple script invocation.  The scripts
	'self-terminate' as each contains the )OFF system command.
	EOF

        nn=2a;
        herald "Test Case ${nn} - Execute script from stdin redirected using '<'";
        invoke apl.py '<' "test_${nn::1}.txt" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=2b;
        herald "Test Case ${nn} - Execute script from stdin redirected using '|'";
        invoke cat "test_${nn::1}.txt" '|' apl.py '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=2c;
        herald "Test Case ${nn} - Execute script using command line flag";
        invoke apl.py -f "test_${nn::1}.txt" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=2d;
        herald "Test Case ${nn} - Execute implicit script using #!";
        invoke ./"test_${nn::1}.apl" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";
        ;;

      (3)
        narrative <<- EOF
	The following test cases check what happens when a script does not
	self-terminate. The scripts are as before but the )OFF command
	had been commented out.
	EOF

        nn=3a;
        herald "Test Case ${nn} - Execute script from stdin redirected using '<'";
        invoke apl.py '<' "test_${nn::1}.txt" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=3b;
        herald "Test Case ${nn} - Execute script from stdin redirected using '|'";
        invoke cat "test_${nn::1}.txt" '|' apl.py '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=3c;
        herald "Test Case ${nn} - Execute script using command line flag";
        if [[ -n "${nopause}" ]]; then
            note "\n... skipping\n";
        else
            note "... type ^D to complete the test";
            invoke apl.py -f "test_${nn::1}.txt" '&>' "case_${nn}.out";
            invoke diff "case_${nn}.out" test_3i.ref;
        fi

        nn=3d;
        herald "Test Case ${nn} - Execute implicit script using #!";
        if [[ -n "${nopause}" ]]; then
            note "\n... skipping\n";
        else
            note "... type ^D to complete the test";
            invoke ./"test_${nn::1}.apl" '&>' "case_${nn}.out";
            invoke diff "case_${nn}.out" test_3i.ref;
        fi
        ;;

      (4)
        narrative <<- EOF
	The following test cases check what happens when a script is used
	in conjunction with a command line expression.
	EOF

        nn=4a;
        herald "Test Case ${nn} - Execute script from stdin redirected using '<'";
        invoke apl.py 16 ÷ 4 '<' "test_${nn::1}.txt" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=4b;
        herald "Test Case ${nn} - Execute script from stdin redirected using '|'";
        invoke cat "test_${nn::1}.txt" '|' apl.py 16 ÷ 4 '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=4c;
        herald "Test Case ${nn} - Execute script using command line flag";
        invoke apl.py -f "test_${nn::1}.txt" -- 16 ÷ 4 '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=4d;
        herald "Test Case ${nn} - Execute implicit script using #!";
        invoke ./"test_${nn::1}.apl" -- 16 ÷ 4  '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";
        ;;

      (5)
        narrative <<- EOF
	The following test cases check what happens when a script is used
	in conjunction with a command line expression and the -s option is
	used to run in silent mode
	EOF

        nn=5a;
        herald "Test Case ${nn} - Execute script from stdin redirected using '<'";
        invoke apl.py -s -- 16 ÷ 4 '<' "test_${nn::1}.txt" '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=5b;
        herald "Test Case ${nn} - Execute script from stdin redirected using '|'";
        invoke cat "test_${nn::1}.txt" '|' apl.py -s -- 16 ÷ 4 '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=5c;
        herald "Test Case ${nn} - Execute script using command line flag";
        invoke apl.py -s -f "test_${nn::1}.txt" -- 16 ÷ 4 '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=5d;
        herald "Test Case ${nn} - Execute implicit script using #!";
        invoke ./"test_${nn::1}.apl" -- 16 ÷ 4 '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";
        ;;

      (6)
        narrative <<- EOF
	The following test cases check what happens when a script is used
	with the -s option and an APL error occurs.

	In all cases:
	    a) the offending line should be output as if -s had not been specified
	    b) the file name and line number should also be output
	    c) execution of the scripts stops and the interpreter exits
	EOF

        nn=6a;
        herald "Test Case ${nn} - Execute script from stdin redirected using '<'";
        invoke apl.py -s -- 16 ÷ 4 '<' "test_${nn::1}.txt" '&>' "case_${nn}.out" '||' true;
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=6b;
        herald "Test Case ${nn} - Execute script from stdin redirected using '|'";
        invoke cat "test_${nn::1}.txt" '|' apl.py -s -- 16 ÷ 4 '&>' "case_${nn}.out" '||' true;
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=6c;
        herald "Test Case ${nn} - Execute script using command line flag";
        invoke apl.py -s -f "test_${nn::1}.txt" -- 16 ÷ 4 '&>' "case_${nn}.out" '||' true;
        invoke diff "case_${nn}.out" test_6c.ref;

        nn=6d;
        herald "Test Case ${nn} - Execute implicit script using #!";
        invoke ./"test_${nn::1}.apl" -- 16 ÷ 4 '&>' "case_${nn}.out" '||' true;
        invoke diff "case_${nn}.out" test_6d.ref;
        ;;

      (7)
        narrative <<- EOF
	The following test cases check output redirection through tee will
	capture a session log (including a Python stack trace if necessary).
	EOF

        nn=7a;
        herald "Test Case ${nn} - Execute script from stdin redirected using '<'";
        invoke apl.py '<' "test_${nn::1}.txt" '|&' tee -i "case_${nn}.tee";
        invoke diff "case_${nn}.tee" "test_${nn::1}.ref";

        nn=7b;
        herald "Test Case ${nn} - Execute script from stdin redirected using '|'";
        invoke cat "test_${nn::1}.txt" '|' apl.py '|&' tee -i "case_${nn}.tee";
        invoke diff "case_${nn}.tee" "test_${nn::1}.ref";

        nn=7c;
        herald "Test Case ${nn} - Execute script using command line flag";
        if [[ -n "${nopause}" ]]; then
            note "\n... skipping\n";
        else
            note "... type ^D to complete the test";
            invoke apl.py -f "test_${nn::1}.txt" '|&' tee -i "case_${nn}.tee";
            invoke diff "case_${nn}.tee" test_7i.ref;
        fi

        nn=7d;
        herald "Test Case ${nn} - Execute implicit script using #!";
        if [[ -n "${nopause}" ]]; then
            note "\n... skipping\n";
        else
            note "... type ^D to complete the test";
            invoke ./"test_${nn::1}.apl" '|&' tee -i "case_${nn}.tee";
            invoke diff "case_${nn}.tee" test_7i.ref;
        fi
        ;;

      (8)
        narrative <<- EOF
	The following test cases check that explicit output occurs even
	when script or silent mode as been requested.
	EOF

        nn=8a;
        herald "Test Case ${nn} - Execute script from stdin redirected using '<'";
        invoke apl.py -s '<' "test_${nn::1}.txt" '&>' case_${nn}.out;
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=8b;
        herald "Test Case ${nn} - Execute script from stdin redirected using '|'";
        invoke cat "test_${nn::1}.txt" '|' apl.py -s '&>' case_${nn}.out;
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=8c;
        herald "Test Case ${nn} - Execute script using command line flag";
        invoke apl.py -s -f "test_${nn::1}.txt" '&>' case_${nn}.out;
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";

        nn=8d;
        herald "Test Case ${nn} - Execute implicit script using #!";
        invoke ./"test_${nn::1}.apl" '&>' case_${nn}.out;
        invoke diff "case_${nn}.out" "test_${nn::1}.ref";
        ;;
    esac
done

summary;

# EOF
