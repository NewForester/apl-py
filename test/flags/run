#!/bin/bash --posix

##
##  Goal:       exercise the recognition of command line flags by apl.py
##
##  Use:        ./test/flags/run [-a | -aa] [nn ... ]
##
##  where   nn is in the range [1,4] and designates which test cases to run
##          if nn is not given, all test cases are run
##
##  Flags:  -a      more automation -
##                  no prompting to inform the tester of what is going on
##          -aa     even more automation -
##                  any scripts that require manual are skipped
##

cd ${0%/*};

source ../../test/framework;

if [[ $# == 0 ]]; then
	narrative <<- EOF
	These are tests of apl-py's handling of command line flags that do not
	belong in any of the other test groups.

	The emphasis is on the recognition and rejection of flags but the final
	section checks the correct handling of exceptions arising from opening
	and closing files.

	The test cases for help output compare against a reference file but the others
	merit simple visual inspection to determine pass/fail.
	EOF
    steps="1 2 3 4";
    rm case*;
else
    steps="$@";
fi

for step in ${steps}; do
    case ${step} in
      (1)
        narrative <<- EOF
	Test cases to check recognition and rejection of command line flags.
	EOF

        nn=1a;
        herald "Test Case ${nn} - Response to an unrecognised short form flag";
        invoke apl.py -x '||' true;

        nn=1b;
        herald "Test Case ${nn} - Response to an unrecognised long form flag";
        invoke apl.py --extra '||' true;

        nn=1c;
        herald "Test Case ${nn} - Check recognition of short form flags";
        if [[ -n "${nopause}" ]]; then
            note "\n... skipping\n";
        else
            note "... type ^D to complete the test";
            invoke apl.py -s -v;
        fi

        nn=1d;
        herald "Test Case ${nn} - Check recognition of long form flags";
        if [[ -n "${nopause}" ]]; then
            note "\n... skipping\n";
        else
            note "... type ^D to complete the test";
            invoke apl.py --silent --verbose;
        fi
      ;;

      (2)
        narrative <<- EOF
	Test cases check the short and long forms of the help flag.
	EOF

        nn=2a;
        herald "Test Case ${nn} - Check recognition of short form help flag";
        invoke apl.py -h '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "help.ref";

        nn=2b;
        herald "Test Case ${nn} - Check recognition of long form help flag";
        invoke apl.py --help '&>' "case_${nn}.out";
        invoke diff "case_${nn}.out" "help.ref";
      ;;

      (3)
        narrative <<- EOF
	Test cases check the short and long forms of the version flag.
	EOF

        nn=3a;
        herald "Test Case ${nn} - Check recognition of short form version flag";
        invoke apl.py -V;

        nn=3b;
        herald "Test Case ${nn} - Check recognition of long form version flag";
        invoke apl.py --Version;
      ;;

      (4)
        narrative <<- EOF
	Test cases check behaviour when files cannot be opened or created.
	EOF

        nn=4a;
        herald "Test Case ${nn} - Response to input redirection to a file that cannot be read";
        invoke apl.py -f "test_${nn::1}.txt" '||' true;
        ;;
    esac
done

summary;

# EOF
